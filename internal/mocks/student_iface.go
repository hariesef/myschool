// Code generated by MockGen. DO NOT EDIT.
// Source: student_iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "myschool/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStudentModel is a mock of StudentModel interface.
type MockStudentModel struct {
	ctrl     *gomock.Controller
	recorder *MockStudentModelMockRecorder
}

// MockStudentModelMockRecorder is the mock recorder for MockStudentModel.
type MockStudentModelMockRecorder struct {
	mock *MockStudentModel
}

// NewMockStudentModel creates a new mock instance.
func NewMockStudentModel(ctrl *gomock.Controller) *MockStudentModel {
	mock := &MockStudentModel{ctrl: ctrl}
	mock.recorder = &MockStudentModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentModel) EXPECT() *MockStudentModelMockRecorder {
	return m.recorder
}

// GetCreatedAt mocks base method.
func (m *MockStudentModel) GetCreatedAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockStudentModelMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockStudentModel)(nil).GetCreatedAt))
}

// GetGender mocks base method.
func (m *MockStudentModel) GetGender() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGender")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetGender indicates an expected call of GetGender.
func (mr *MockStudentModelMockRecorder) GetGender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGender", reflect.TypeOf((*MockStudentModel)(nil).GetGender))
}

// GetName mocks base method.
func (m *MockStudentModel) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockStudentModelMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockStudentModel)(nil).GetName))
}

// GetUID mocks base method.
func (m *MockStudentModel) GetUID() uint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUID")
	ret0, _ := ret[0].(uint)
	return ret0
}

// GetUID indicates an expected call of GetUID.
func (mr *MockStudentModelMockRecorder) GetUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUID", reflect.TypeOf((*MockStudentModel)(nil).GetUID))
}

// GetUpdatedAt mocks base method.
func (m *MockStudentModel) GetUpdatedAt() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedAt")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUpdatedAt indicates an expected call of GetUpdatedAt.
func (mr *MockStudentModelMockRecorder) GetUpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedAt", reflect.TypeOf((*MockStudentModel)(nil).GetUpdatedAt))
}

// MockStudentRepo is a mock of StudentRepo interface.
type MockStudentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockStudentRepoMockRecorder
}

// MockStudentRepoMockRecorder is the mock recorder for MockStudentRepo.
type MockStudentRepoMockRecorder struct {
	mock *MockStudentRepo
}

// NewMockStudentRepo creates a new mock instance.
func NewMockStudentRepo(ctrl *gomock.Controller) *MockStudentRepo {
	mock := &MockStudentRepo{ctrl: ctrl}
	mock.recorder = &MockStudentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStudentRepo) EXPECT() *MockStudentRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStudentRepo) Create(ctx context.Context, args model.StudentCreationParam) (model.StudentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, args)
	ret0, _ := ret[0].(model.StudentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStudentRepoMockRecorder) Create(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStudentRepo)(nil).Create), ctx, args)
}

// Delete mocks base method.
func (m *MockStudentRepo) Delete(ctx context.Context, uid uint) (model.StudentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, uid)
	ret0, _ := ret[0].(model.StudentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStudentRepoMockRecorder) Delete(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStudentRepo)(nil).Delete), ctx, uid)
}

// FindByName mocks base method.
func (m *MockStudentRepo) FindByName(ctx context.Context, studentName string) ([]model.StudentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, studentName)
	ret0, _ := ret[0].([]model.StudentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockStudentRepoMockRecorder) FindByName(ctx, studentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockStudentRepo)(nil).FindByName), ctx, studentName)
}

// Read mocks base method.
func (m *MockStudentRepo) Read(ctx context.Context, uid uint) (model.StudentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, uid)
	ret0, _ := ret[0].(model.StudentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStudentRepoMockRecorder) Read(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStudentRepo)(nil).Read), ctx, uid)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: token_iface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	model "myschool/pkg/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthTokenModel is a mock of AuthTokenModel interface.
type MockAuthTokenModel struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTokenModelMockRecorder
}

// MockAuthTokenModelMockRecorder is the mock recorder for MockAuthTokenModel.
type MockAuthTokenModelMockRecorder struct {
	mock *MockAuthTokenModel
}

// NewMockAuthTokenModel creates a new mock instance.
func NewMockAuthTokenModel(ctrl *gomock.Controller) *MockAuthTokenModel {
	mock := &MockAuthTokenModel{ctrl: ctrl}
	mock.recorder = &MockAuthTokenModelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthTokenModel) EXPECT() *MockAuthTokenModelMockRecorder {
	return m.recorder
}

// GetEmail mocks base method.
func (m *MockAuthTokenModel) GetEmail() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmail")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetEmail indicates an expected call of GetEmail.
func (mr *MockAuthTokenModelMockRecorder) GetEmail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmail", reflect.TypeOf((*MockAuthTokenModel)(nil).GetEmail))
}

// GetExpiry mocks base method.
func (m *MockAuthTokenModel) GetExpiry() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiry")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExpiry indicates an expected call of GetExpiry.
func (mr *MockAuthTokenModelMockRecorder) GetExpiry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiry", reflect.TypeOf((*MockAuthTokenModel)(nil).GetExpiry))
}

// GetID mocks base method.
func (m *MockAuthTokenModel) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockAuthTokenModelMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockAuthTokenModel)(nil).GetID))
}

// GetToken mocks base method.
func (m *MockAuthTokenModel) GetToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockAuthTokenModelMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockAuthTokenModel)(nil).GetToken))
}

// GetUserID mocks base method.
func (m *MockAuthTokenModel) GetUserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockAuthTokenModelMockRecorder) GetUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockAuthTokenModel)(nil).GetUserID))
}

// MockAuthTokenRepo is a mock of AuthTokenRepo interface.
type MockAuthTokenRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAuthTokenRepoMockRecorder
}

// MockAuthTokenRepoMockRecorder is the mock recorder for MockAuthTokenRepo.
type MockAuthTokenRepoMockRecorder struct {
	mock *MockAuthTokenRepo
}

// NewMockAuthTokenRepo creates a new mock instance.
func NewMockAuthTokenRepo(ctrl *gomock.Controller) *MockAuthTokenRepo {
	mock := &MockAuthTokenRepo{ctrl: ctrl}
	mock.recorder = &MockAuthTokenRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthTokenRepo) EXPECT() *MockAuthTokenRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAuthTokenRepo) Create(ctx context.Context, args model.TokenCreationParam) (model.AuthTokenModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, args)
	ret0, _ := ret[0].(model.AuthTokenModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAuthTokenRepoMockRecorder) Create(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAuthTokenRepo)(nil).Create), ctx, args)
}

// Delete mocks base method.
func (m *MockAuthTokenRepo) Delete(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAuthTokenRepoMockRecorder) Delete(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAuthTokenRepo)(nil).Delete), ctx, token)
}

// Find mocks base method.
func (m *MockAuthTokenRepo) Find(ctx context.Context, token string) (model.AuthTokenModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, token)
	ret0, _ := ret[0].(model.AuthTokenModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockAuthTokenRepoMockRecorder) Find(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockAuthTokenRepo)(nil).Find), ctx, token)
}
